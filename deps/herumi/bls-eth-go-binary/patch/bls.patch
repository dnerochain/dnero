--- ../bls/ffi/go/bls/bls.go	2020-07-06 18:12:45.405585450 +0900
+++ bls/bls.go	2020-10-08 14:00:45.157310780 +0900
@@ -1,28 +1,42 @@
 package bls
 
 /*
-#cgo bn256 CFLAGS:-DMCLBN_FP_UNIT_SIZE=4
-#cgo bn256 LDFLAGS:-lbls256
-#cgo bn384 CFLAGS:-DMCLBN_FP_UNIT_SIZE=6
-#cgo bn384 LDFLAGS:-lbls384
-#cgo bn384_256 CFLAGS:-DMCLBN_FP_UNIT_SIZE=6 -DMCLBN_FR_UNIT_SIZE=4
-#cgo bn384_256 LDFLAGS:-lbls384_256
-#cgo LDFLAGS:-lcrypto -lgmp -lgmpxx -lstdc++
-
-#cgo LDFLAGS:-lcrypto -lgmp -lgmpxx -lstdc++
+#cgo CFLAGS:-I${SRCDIR}./include -DBLS_ETH -DBLS_SWAP_G
+#cgo LDFLAGS:-lbls384_256 -lstdc++ -lm
+#cgo ios LDFLAGS:-L${SRCDIR}/lib/ios
+#cgo android,arm64 LDFLAGS:-L${SRCDIR}/lib/android/arm64-v8a
+#cgo android,arm LDFLAGS:-L${SRCDIR}/lib/android/armeabi-v7a
+#cgo android,amd64 LDFLAGS:-L${SRCDIR}/lib/android/x86_64
+#cgo linux,amd64 LDFLAGS:-L${SRCDIR}/lib/linux/amd64
+#cgo linux,arm64 LDFLAGS:-L${SRCDIR}/lib/linux/arm64
+#cgo linux,mipsle LDFLAGS:-L${SRCDIR}/lib/linux/mipsel
+#cgo linux,arm LDFLAGS:-L${SRCDIR}/lib/android/armeabi-v7a
+#cgo darwin,amd64 LDFLAGS:-L${SRCDIR}/lib/darwin/amd64
+#cgo darwin,arm64 LDFLAGS:-L${SRCDIR}/lib/darwin/arm64
+#cgo windows,amd64 LDFLAGS:-L${SRCDIR}/lib/windows/amd64
+#cgo openbsd,amd64 LDFLAGS:-L${SRCDIR}/lib/openbsd/amd64
 typedef unsigned int (*ReadRandFunc)(void *, void *, unsigned int);
 int wrapReadRandCgo(void *self, void *buf, unsigned int n);
+#include <mcl/bn_c384_256.h>
 #include <bls/bls.h>
 */
 import "C"
 import (
+	"crypto/rand"
 	"encoding/hex"
 	"encoding/json"
 	"fmt"
 	"io"
+	"runtime"
 	"unsafe"
 )
 
+const EthModeOld = C.BLS_ETH_MODE_OLD
+const EthModeDraft05 = C.BLS_ETH_MODE_DRAFT_05
+const EthModeDraft06 = C.BLS_ETH_MODE_DRAFT_06
+const EthModeDraft07 = C.BLS_ETH_MODE_DRAFT_07
+const EthModeLatest = C.BLS_ETH_MODE_LATEST
+
 func hex2byte(s string) ([]byte, error) {
 	if (len(s) & 1) == 1 {
 		return nil, fmt.Errorf("odd length")
@@ -34,10 +48,16 @@ func hex2byte(s string) ([]byte, error)
 // call this function before calling all the other operations
 // this function is not thread safe
 func Init(curve int) error {
+	if curve != C.MCL_BLS12_381 {
+		return fmt.Errorf("ERR only BLS12-381")
+	}
 	err := C.blsInit(C.int(curve), C.MCLBN_COMPILED_TIME_VAR)
 	if err != 0 {
 		return fmt.Errorf("ERR Init curve=%d", curve)
 	}
+	if err := SetETHmode(EthModeDraft07); err != nil {
+		return fmt.Errorf("ERR SetETHmode")
+	}
 	return nil
 }
 
@@ -155,7 +175,7 @@ type SecretKey struct {
 
 // Serialize --
 func (sec *SecretKey) Serialize() []byte {
-	buf := make([]byte, 2048)
+	buf := make([]byte, 32)
 	// #nosec
 	n := C.blsSecretKeySerialize(unsafe.Pointer(&buf[0]), C.mclSize(len(buf)), &sec.v)
 	if n == 0 {
@@ -360,7 +380,7 @@ func (keys PublicKeys) JSON() string {
 
 // Serialize --
 func (pub *PublicKey) Serialize() []byte {
-	buf := make([]byte, 2048)
+	buf := make([]byte, 48)
 	// #nosec
 	n := C.blsPublicKeySerialize(unsafe.Pointer(&buf[0]), C.mclSize(len(buf)), &pub.v)
 	if n == 0 {
@@ -463,7 +483,7 @@ type Sign struct {
 
 // Serialize --
 func (sig *Sign) Serialize() []byte {
-	buf := make([]byte, 2048)
+	buf := make([]byte, 96)
 	// #nosec
 	n := C.blsSignatureSerialize(unsafe.Pointer(&buf[0]), C.mclSize(len(buf)), &sig.v)
 	if n == 0 {
@@ -680,6 +700,135 @@ func (sig *Sign) VerifyAggregateHashes(p
 	return C.blsVerifyAggregatedHashes(&sig.v, &pubVec[0].v, unsafe.Pointer(&h[0]), C.mclSize(hashByte), C.mclSize(n)) == 1
 }
 
+// SignatureVerifyOrder --
+// check the correctness of the order of signature in deserialize if true
+func SignatureVerifyOrder(doVerify bool) {
+	var b = 0
+	if doVerify {
+		b = 1
+	}
+	C.blsSignatureVerifyOrder(C.int(b))
+}
+
+// SignByte --
+func (sec *SecretKey) SignByte(msg []byte) (sig *Sign) {
+	sig = new(Sign)
+	// #nosec
+	C.blsSign(&sig.v, &sec.v, unsafe.Pointer(&msg[0]), C.mclSize(len(msg)))
+	return sig
+}
+
+// VerifyByte --
+func (sig *Sign) VerifyByte(pub *PublicKey, msg []byte) bool {
+	if sig == nil || pub == nil {
+		return false
+	}
+	// #nosec
+	return C.blsVerify(&sig.v, &pub.v, unsafe.Pointer(&msg[0]), C.mclSize(len(msg))) == 1
+}
+
+// MultiVerify --
+// true if all (sigs[i], pubs[i], concatenatedMsg[msgSize*i:msgSize*(i+1)]) are valid
+// concatenatedMsg has the size of len(sigs) * 32
+func MultiVerify(sigs []Sign, pubs []PublicKey, concatenatedMsg []byte) bool {
+	msgSize := 32
+	randSize := 8
+	threadN := runtime.NumCPU()
+	n := len(sigs)
+	if n == 0 || len(pubs) != n || len(concatenatedMsg) != n*msgSize {
+		return false
+	}
+	randVec := make([]byte, n*randSize)
+	rand.Read(randVec)
+
+	var e C.mclBnGT
+	var aggSig Sign
+	msg := uintptr(unsafe.Pointer(&concatenatedMsg[0]))
+	rp := uintptr(unsafe.Pointer(&randVec[0]))
+
+	maxThreadN := 32
+	if threadN > maxThreadN {
+		threadN = maxThreadN
+	}
+	minN := 16
+	if threadN > 1 && n >= minN {
+		et := make([]C.mclBnGT, threadN)
+		aggSigt := make([]Sign, threadN)
+		blockN := n / minN
+		q := blockN / threadN
+		r := blockN % threadN
+		cs := make(chan int, threadN)
+		sub := func(i int, sigs []Sign, pubs []PublicKey, msg uintptr, rp uintptr, m int) {
+			C.blsMultiVerifySub(&et[i], &aggSigt[i].v, &sigs[0].v, &pubs[0].v, (*C.char)(unsafe.Pointer(msg)), C.mclSize(msgSize), (*C.char)(unsafe.Pointer(rp)), C.mclSize(randSize), C.mclSize(m))
+			cs <- 1
+		}
+		for i := 0; i < threadN; i++ {
+			m := q
+			if r > 0 {
+				m++
+				r--
+			}
+			if m == 0 {
+				threadN = i // n is too small for threadN
+				break
+			}
+			m *= minN
+			if i == threadN-1 {
+				m = n // remain all
+			}
+			// C.blsMultiVerifySub(&et[i], &aggSigt[i].v, &sigs[0].v, &pubs[0].v, (*C.char)(unsafe.Pointer(msg)), C.mclSize(msgSize), (*C.char)(unsafe.Pointer(rp)), C.mclSize(randSize), C.mclSize(m))
+			go sub(i, sigs, pubs, msg, rp, m)
+			sigs = sigs[m:]
+			pubs = pubs[m:]
+			msg += uintptr(msgSize * m)
+			rp += uintptr(randSize * m)
+			n -= m
+		}
+		for i := 0; i < threadN; i++ {
+			<-cs
+		}
+		e = et[0]
+		aggSig = aggSigt[0]
+		for i := 1; i < threadN; i++ {
+			C.mclBnGT_mul(&e, &e, &et[i])
+			aggSig.Add(&aggSigt[i])
+		}
+	} else {
+		C.blsMultiVerifySub(&e, &aggSig.v, &sigs[0].v, &pubs[0].v, (*C.char)(unsafe.Pointer(msg)), C.mclSize(msgSize), (*C.char)(unsafe.Pointer(rp)), C.mclSize(randSize), C.mclSize(n))
+	}
+	return C.blsMultiVerifyFinal(&e, &aggSig.v) == 1
+}
+
+/*
+func MultiVerify(sigs []Sign, pubs []PublicKey, concatenatedMsg []byte) bool {
+	msgSize := 32
+	randSize := 8
+	threadN := runtime.NumCPU()
+	n := len(sigs)
+	if n == 0 || len(pubs) != n || len(concatenatedMsg) != n*msgSize {
+		return false
+	}
+	randVec := make([]byte, n*randSize)
+	rand.Read(randVec)
+	// #nosec
+	return C.blsMultiVerify(&sigs[0].v, &pubs[0].v, unsafe.Pointer(&concatenatedMsg[0]), C.mclSize(msgSize), unsafe.Pointer(&randVec[0]), C.mclSize(randSize), C.mclSize(n), C.int(threadN)) == 1
+}
+*/
+
+// Aggregate --
+func (sig *Sign) Aggregate(sigVec []Sign) {
+	C.blsAggregateSignature(&sig.v, &sigVec[0].v, C.mclSize(len(sigVec)))
+}
+
+// FastAggregateVerify --
+func (sig *Sign) FastAggregateVerify(pubVec []PublicKey, msg []byte) bool {
+	if pubVec == nil {
+		return false
+	}
+	n := len(pubVec)
+	return C.blsFastAggregateVerify(&sig.v, &pubVec[0].v, C.mclSize(n), unsafe.Pointer(&msg[0]), C.mclSize(len(msg))) == 1
+}
+
 ///
 
 var sRandReader io.Reader
@@ -715,3 +864,103 @@ func SetRandFunc(randReader io.Reader) {
 func BlsGetGeneratorOfPublicKey(pub *PublicKey) {
 	C.blsGetGeneratorOfPublicKey(&pub.v)
 }
+
+// SerializeUncompressed --
+func (pub *PublicKey) SerializeUncompressed() []byte {
+	buf := make([]byte, 96)
+	// #nosec
+	n := C.blsPublicKeySerializeUncompressed(unsafe.Pointer(&buf[0]), C.mclSize(len(buf)), &pub.v)
+	if n == 0 {
+		panic("err blsPublicKeySerializeUncompressed")
+	}
+	return buf[:n]
+}
+
+// SerializeUncompressed --
+func (sig *Sign) SerializeUncompressed() []byte {
+	buf := make([]byte, 192)
+	// #nosec
+	n := C.blsSignatureSerializeUncompressed(unsafe.Pointer(&buf[0]), C.mclSize(len(buf)), &sig.v)
+	if n == 0 {
+		panic("err blsSignatureSerializeUncompressed")
+	}
+	return buf[:n]
+}
+
+// DeserializeUncompressed --
+func (pub *PublicKey) DeserializeUncompressed(buf []byte) error {
+	// #nosec
+	err := C.blsPublicKeyDeserializeUncompressed(&pub.v, unsafe.Pointer(&buf[0]), C.mclSize(len(buf)))
+	if err == 0 {
+		return fmt.Errorf("err blsPublicKeyDeserializeUncompressed %x", buf)
+	}
+	return nil
+}
+
+// DeserializeUncompressed --
+func (sig *Sign) DeserializeUncompressed(buf []byte) error {
+	// #nosec
+	err := C.blsSignatureDeserializeUncompressed(&sig.v, unsafe.Pointer(&buf[0]), C.mclSize(len(buf)))
+	if err == 0 {
+		return fmt.Errorf("err blsSignatureDeserializeUncompressed %x", buf)
+	}
+	return nil
+}
+
+// SetETHmode --
+// 0 ; old version
+// 1 ; draft 05
+// 2 ; draft 06
+func SetETHmode(mode int) error {
+	if err := C.blsSetETHmode(C.int(mode)); err != 0 {
+		return fmt.Errorf("got non-zero response code: %d", err)
+	}
+	return nil
+}
+
+// AreAllMsgDifferent checks the given message slice to ensure that each 32 byte segment is unique.
+func AreAllMsgDifferent(msgVec []byte) bool {
+	const MSG_SIZE = 32
+	n := len(msgVec) / MSG_SIZE
+	if n*MSG_SIZE != len(msgVec) {
+		return false
+	}
+	set := make(map[[MSG_SIZE]byte]struct{}, n)
+	msg := [MSG_SIZE]byte{}
+	for i := 0; i < n; i++ {
+		// one copy can be reduced by unsafe.Pointer
+		// msg := *(*[MSG_SIZE]byte)(unsafe.Pointer(&msgVec[i*MSG_SIZE : (i+1)*MSG_SIZE][0]))
+		copy(msg[:], msgVec[i*MSG_SIZE:(i+1)*MSG_SIZE])
+		_, ok := set[msg]
+		if ok {
+			return false
+		}
+		set[msg] = struct{}{}
+	}
+	return true
+}
+
+func (sig *Sign) innerAggregateVerify(pubVec []PublicKey, msgVec []byte, checkMessage bool) bool {
+	const MSG_SIZE = 32
+	n := len(pubVec)
+	if n == 0 || len(msgVec) != MSG_SIZE*n {
+		return false
+	}
+	if checkMessage && !AreAllMsgDifferent(msgVec) {
+		return false
+	}
+	return C.blsAggregateVerifyNoCheck(&sig.v, &pubVec[0].v, unsafe.Pointer(&msgVec[0]), MSG_SIZE, C.mclSize(n)) == 1
+}
+
+// AggregateVerify --
+// len(msgVec) == 32 * len(pubVec)
+func (sig *Sign) AggregateVerifyNoCheck(pubVec []PublicKey, msgVec []byte) bool {
+	return sig.innerAggregateVerify(pubVec, msgVec, false)
+}
+
+// AggregateVerify --
+// len(msgVec) == 32 * len(pubVec)
+// check all msgs are different each other
+func (sig *Sign) AggregateVerify(pubVec []PublicKey, msgVec []byte) bool {
+	return sig.innerAggregateVerify(pubVec, msgVec, true)
+}
